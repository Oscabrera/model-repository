<?php

namespace App\Services\DummyModel;

use App\Contracts\Repositories\DummyModel\DummyRepository;
use App\Contracts\Services\DummyModel\DummyInterface;
use App\Http\Requests\DummyModel\DummyModelRequest;
use Oscabrera\JsonApiFormatPaginate\Transformers\EntityResourceTransformer;
use Oscabrera\JsonApiFormatPaginate\Transformers\JsonApiPaginationTransformer;
use Oscabrera\QueryFilters\Utilities\QueryFilters;

/**
 * Class DummyClass
 *
 * This class represents a DummyClass that interacts
 * with a DummyRepository.
 */
class DummyClass implements DummyInterface
{
    /**
     * Class Constructor.
     *
     * @param DummyRepository $repository The model object to be injected.
     */
    public function __construct(
        protected DummyRepository $repository
    ) {
    }

    /**
     * Create a new DummyModel resource.
     *
     * @param DummyModelRequest $request The request object containing the data for creating a DummyModel.
     *
     * @return EntityResourceTransformer Returns the newly created UserResource if successful,
     * or null if the User creation failed.
     */
    public function create(DummyModelRequest $request): EntityResourceTransformer
    {
        return new EntityResourceTransformer($this->repository->create($request->all()));
    }

    /**
     * Read a DummyModel resource by ID.
     *
     * @param string $id The ID of the DummyModel resource to fetch.
     *
     * @return EntityResourceTransformer The DummyModel resource, or null if not found.
     */
    public function read(string $id): EntityResourceTransformer
    {
        return new EntityResourceTransformer($this->repository->read($id));
    }

    /**
     * Updates a DummyModel resource.
     *
     * @param string $id The ID of the DummyModel resource to update.
     * @param DummyModelRequest $request The request data for updating the DummyModel.
     *
     * @return bool
     */
    public function update(string $id, DummyModelRequest $request): bool
    {
        return $this->repository->update($this->repository->read($id), $request->all());
    }

    /**
     * Deletes a DummyModel object based on the provided ID.
     *
     * @param string $id The ID of the DummyModel object to delete.
     *
     * @return bool True if the deletion was successful, false otherwise.
     */
    public function delete(string $id): bool
    {
        return $this->repository->delete($this->repository->read($id));
    }

    /**
     * List all DummyModel resources.
     *
     * @return JsonApiPaginationTransformer
     */
    public function list(): JsonApiPaginationTransformer
    {
        $options = new QueryFilters();
        return new JsonApiPaginationTransformer($this->repository->list($options));
    }
}
