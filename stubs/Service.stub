<?php

namespace App\Services\DummyModel;

use App\Contracts\DummyModel\DummyInterface;
use App\Http\Requests\DummyModel\DummyModelRequest;
use App\Http\Resources\DummyModel\DummyModelCollection;
use App\Http\Resources\DummyModel\DummyModelResource;
use App\Repositories\DummyModel\DummyRepository;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Oscabrera\ModelRepository\Exception\ModelCreateException;

/**
 * Class DummyClass
 *
 * This class represents a DummyClass that interacts
 * with a DummyRepository.
 */
class DummyClass implements DummyInterface
{
    /**
     * Class Constructor.
     *
     * @param DummyRepository $repository The model object to be injected.
     */
    public function __construct(
        protected DummyRepository $repository
    ) {
    }

    /**
     * Create a new DummyModel resource.
     *
     * @param DummyModelRequest $request The request object containing the data for creating a DummyModel.
     *
     * @return DummyModelResource Returns the newly created DummyModelResource if successful, or null if the DummyModel creation failed.
     *
     * @throws ModelCreateException
     */
    public function create(DummyModelRequest $request): DummyModelResource
    {
        return new DummyModelResource($this->repository->create($request->all()));
    }

    /**
     * Read a DummyModel resource by ID.
     *
     * @param string $id The ID of the DummyModel resource to fetch.
     *
     * @return DummyModelResource The DummyModel resource, or null if not found.
     *
     * @throws ModelNotFoundException
     */
    public function read(string $id): DummyModelResource
    {
        return new DummyModelResource($this->repository->read($id));
    }

    /**
     * Updates a DummyModel resource.
     *
     * @param string $id The ID of the DummyModel resource to update.
     * @param DummyModelRequest $request The request data for updating the DummyModel.
     *
     * @return bool
     *
     * @throws ModelNotFoundException
     */
    public function update(string $id, DummyModelRequest $request): bool
    {
        return $this->repository->update($this->repository->read($id), $request->all());
    }

    /**
     * Deletes a DummyModel object based on the provided ID.
     *
     * @param string $id The ID of the DummyModel object to delete.
     *
     * @return bool True if the deletion was successful, false otherwise.
     *
     * @throws ModelNotFoundException
     */
    public function delete(string $id): bool
    {
        return $this->repository->delete($this->repository->read($id));
    }

    /**
     * List all DummyModel resources.
     *
     * @return DummyModelCollection
     *
     * @throws ModelNotFoundException
     */
    public function list(): DummyModelCollection
    {
        return new DummyModelCollection($this->repository->list());
    }
}
