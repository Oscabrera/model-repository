<?php

namespace App\Repositories\DummyModel;

use App\Contracts\Repositories\DummyModel\DummyInterface;
use App\Models\DummyModel\DummyModel;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Pagination\LengthAwarePaginator;
use Oscabrera\QueryFilters\Utilities\QueryFilters;
use Spatie\QueryBuilder\QueryBuilder;

/**
 * Class DummyClass
 *
 * This class represents a DummyClass that interacts
 * with DummyModel.
 */
class DummyClass implements DummyInterface
{
    /**
     * @var array<int, string>
     */
    protected array $fields = [];

    /**
     * Class Constructor.
     *
     * @param DummyModel $model The model object to be injected.
     */
    public function __construct(
        protected DummyModel $model
    ) {
    }

    /**
     * Create a new record in the database.
     *
     * @param array<string, mixed> $entity
     *  The object to be created.
     *
     * @return DummyModel The created object.
     */
    public function create(array $entity): DummyModel
    {
        $created = $this->model->newQuery()->create($entity);

        /** @var DummyModel $created */
        return $created;
    }

    /**
     * Retrieves a record from the model by the given ID.
     *
     * @param string $id The ID of the record to retrieve.
     *
     * @return DummyModel The retrieved record.
     *
     * @throws ModelNotFoundException
     */
    public function read(string $id): DummyModel
    {
        $found = $this->model->newQuery()->findOrFail($id);

        /** @var DummyModel $found */
        return $found;
    }

    /**
     * Updates the given record in the database.
     *
     * @param DummyModel $entity The record to be updated.
     *
     * @param array<string, mixed> $dataEntity
     *
     * @return bool  True if the record was successfully updated, false otherwise.
     */
    public function update(Model $entity, array $dataEntity): bool
    {
        return $entity->update($dataEntity);
    }

    /**
     * Deletes a record from the database based on the given ID.
     *
     * @param DummyModel $entity
     *
     * @return bool True if the record is successfully deleted, false otherwise.
     */
    public function delete(Model $entity): bool
    {
        return (bool)$entity->delete();
    }

    /**
    * Lists records from the database based on the given conditions.
    * @param QueryFilters $options
    *
    * An array of conditions to filter the records (default: []).
    *
    * @return LengthAwarePaginator  An array of records that match the conditions.
    */
    public function list(QueryFilters $options): LengthAwarePaginator
    {
        $this->fields = $this->model->getFields();
        $query = $this->model->newQuery()->applyFilters($options);
        $query = QueryBuilder::for($query);
        $query->allowedFilters($this->fields);
        $query->allowedSorts($this->fields);
        $query->allowedFields($this->fields);

        return $query->jsonPaginate();
    }
}
